<div class="custom-wide-container" style="width: 100%; max-width: 1500px; margin: 0 auto; padding-left: 24px; padding-right: 24px;">
  <div class="row g-4">
    <!-- フォーム（左・約50%） -->
    <div class="col-12 col-md-6">
      <% if @contract.errors.any? %>
        <div class="alert alert-danger">
          <h4><%= @contract.errors.count %>件のエラーが発生しました</h4>
          <ul>
            <% @contract.errors.full_messages.each do |msg| %>
              <li><%= msg %></li>
            <% end %>
          </ul>
        </div>
      <% end %>

      <%= form_with model: [:admin, @contract], local: true, multipart: true do |f| %>
        <div class="form-group mb-3">
          <%= f.label :user_id, "契約者", class: "form-label fw-bold" %>
          <%= f.collection_select :user_id, 
              @users, 
              :id, :name, 
              { selected: @contract.user_id.nil? ? "admin_#{current_admin.id}" : @contract.user_id }, 
              { class: "form-control rounded-3 shadow-sm" } %>
        </div>

        <div class="form-group mb-3">
          <%= f.label :title, "契約タイトル", class: "form-label fw-bold" %>
          <%= f.text_field :title, class: "form-control rounded-3 shadow-sm", id: "contract_title" %>
        </div>

        <div class="form-group mb-3">
          <%= f.label :body, "契約内容", class: "form-label fw-bold" %>
          <%= f.text_area :body, rows: 8, class: "form-control rounded-3 shadow-sm", id: "contract_body" %>
        </div>

        <div class="form-group mb-3">
          <%= f.label :status_id, "ステータス", class: "form-label fw-bold" %>
          <%= f.collection_select :status_id, Status.all, :id, :name, {}, { class: "form-control rounded-3 shadow-sm" } %>
        </div>

        <div class="form-group mb-3">
          <%= f.label :tag_list, "タグ（カンマ区切り）", class: "form-label fw-bold" %>
          <%= f.text_field :tag_list, value: @contract.tag_list.join(", "), class: "form-control rounded-3 shadow-sm", id: "contract_tag_list" %>
        </div>

        <div class="form-group mb-3">
          <%= f.label :group_id, "グループ", class: "form-label fw-bold" %>
          <%= f.collection_select :group_id, @groups, :id, :name, { include_blank: "選択してください" }, { class: "form-control rounded-3 shadow-sm" } %>
        </div>

        <div class="form-group mb-3">
          <%= f.label :admin_only, class: "form-label fw-bold" do %>
            <%= f.check_box :admin_only, class: "form-check-input me-2" %>
            管理者のみアクセス可能にする
          <% end %>
          <small class="form-text text-muted">チェックすると、この契約書は管理者のみがアクセスできます</small>
        </div>

        <div class="form-group mb-3">
          <%= f.label :contract_conclusion_date, "契約締結日", class: "form-label fw-bold" %>
          <%= f.date_field :contract_conclusion_date, class: "form-control rounded-3 shadow-sm", id: "contract_conclusion_date", placeholder: "例：2024年4月1日" %>
        </div>

        <div class="form-group mb-3">
          <%= f.label :contract_start_date, "契約開始日", class: "form-label fw-bold" %>
          <%= f.date_field :contract_start_date, class: "form-control rounded-3 shadow-sm", id: "contract_start_date", placeholder: "例：2024年4月1日" %>
        </div>

        <div class="form-group mb-3">
          <%= f.label :expiration_date, "契約満了日", class: "form-label fw-bold" %>
          <%= f.date_field :expiration_date, class: "form-control rounded-3 shadow-sm", id: "contract_expiration_date", placeholder: "例：2025年3月31日" %>
        </div>

        <div class="form-group mb-3">
          <%= f.label :renewal_date, "契約更新日", class: "form-label fw-bold" %>
          <%= f.date_field :renewal_date, class: "form-control rounded-3 shadow-sm", placeholder: "例：2025年3月31日" %>
        </div>

        <div class="form-group mb-3">
          <%= f.label :attachments, "添付ファイル", class: "form-label fw-bold" %>
          <%= f.file_field :attachments, multiple: true, class: "form-control rounded-3 shadow-sm", id: "file-input", accept: "image/*,.pdf,.doc,.docx,.xls,.xlsx" %>
        </div>

        <div class="text-end mb-4">
          <button type="button" class="btn btn-outline-primary" id="ocr-button">
            画像から自動入力する
          </button>
        </div>

        <div class="d-grid gap-2 d-md-flex justify-content-md-center mt-4">
          <%= f.submit "保存", class: "btn btn-primary px-4" %>
        </div>
      <% end %>
    </div>

    <!-- プレビュー（右・約50%） -->
    <div class="col-12 col-md-6">
      <div id="pre-upload-preview"
           style="min-height: 500px; border: 2px dashed #b0c4de; border-radius: 12px; background: #f8fafc; padding: 1.5rem; overflow: auto;">
        <div class="text-center text-muted py-4">
          <i class="fas fa-cloud-upload-alt fa-2x mb-3"></i>
          <p>ここに画像やPDFのプレビューが表示されます</p>
        </div>

        <% if @contract.attachments.attached? %>
          <div>
            <strong class="text-dark">添付ファイル</strong>
            <div class="mt-3">
              <div class="row">
                <% @contract.attachments.each do |attachment| %>
                  <div class="col-12 col-sm-6 col-lg-4 mb-3">
                    <div class="card h-100 border-0 shadow-sm">
                      <div class="card-body p-3">
                        <div class="d-flex align-items-center mb-2">
                          <i class="fas fa-paperclip me-2 text-muted"></i>
                          <small class="text-muted flex-grow-1"><%= attachment.filename %></small>
                          <small class="text-muted">(<%= number_to_human_size(attachment.byte_size) %>)</small>
                        </div>

                        <% if attachment.content_type.start_with?('image/') %>
                          <div class="text-center mb-2">
                            <img src="<%= rails_blob_url(attachment) %>"
                                 class="img-fluid rounded"
                                 style="max-height: 200px; max-width: 100%; object-fit: cover;"
                                 alt="<%= attachment.filename %>">
                          </div>
                        <% elsif attachment.content_type.start_with?('application/pdf') %>
                          <div class="text-center mb-2">
                            <div class="bg-light rounded p-3" style="height: 150px; display: flex; align-items: center; justify-content: center;">
                              <i class="fas fa-file-pdf text-danger fa-3x"></i>
                            </div>
                          </div>
                        <% else %>
                          <div class="text-center mb-2">
                            <div class="bg-light rounded p-3" style="height: 150px; display: flex; align-items: center; justify-content: center;">
                              <i class="fas fa-file text-secondary fa-3x"></i>
                            </div>
                          </div>
                        <% end %>

                        <div class="d-flex gap-2 flex-nowrap justify-content-between mt-2">
                          <%= link_to rails_blob_path(attachment, disposition: "attachment"),
                              class: "btn btn-outline-primary btn-sm d-inline-flex align-items-center gap-1 px-3 py-1 flex-fill text-nowrap" do %>
                            <i class="fas fa-download"></i><span>ダウンロード</span>
                          <% end %>
                        </div>

                      </div>
                    </div>
                  </div>
                <% end %>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>



<script>


// ファイルプレビュー機能
function initializeFilePreview() {
  const fileInput = document.getElementById('file-input');
  const previewContainer = document.getElementById('pre-upload-preview');
  
  // 要素が見つからない場合は処理を終了
  if (!fileInput || !previewContainer) {
    console.log('File input or preview container not found');
    return;
  }
  
  // 既存のイベントリスナーを削除（重複を防ぐため）
  fileInput.removeEventListener('change', handleFileChange);
  
  // 新しいイベントリスナーを追加
  fileInput.addEventListener('change', handleFileChange);
  
  function handleFileChange(e) {
    const files = e.target.files;
    
    if (files.length > 0) {
      // 既存のプレビューをクリア
      previewContainer.innerHTML = '';
      
      // 新しいプレビューを作成
      const previewTitle = document.createElement('div');
      previewTitle.innerHTML = '<strong class="text-dark">選択されたファイル</strong>';
      previewContainer.appendChild(previewTitle);
      
      const previewRow = document.createElement('div');
      previewRow.className = 'row mt-3';
      
      Array.from(files).forEach((file, index) => {
        const previewCol = document.createElement('div');
        previewCol.className = 'col-12 col-sm-6 col-lg-4 mb-3';
        
        const previewCard = document.createElement('div');
        previewCard.className = 'card h-100 border-0 shadow-sm';

        
        const cardBody = document.createElement('div');
        cardBody.className = 'card-body p-3';
        
        // ファイル情報
        const fileInfo = document.createElement('div');
        fileInfo.className = 'd-flex align-items-center mb-2';
        fileInfo.innerHTML = `
          <i class="fas fa-paperclip me-2 text-muted"></i>
          <small class="text-muted flex-grow-1">${file.name}</small>
          <small class="text-muted">(${formatFileSize(file.size)})</small>
        `;
        cardBody.appendChild(fileInfo);
        
        // プレビュー表示
        const previewDiv = document.createElement('div');
        previewDiv.className = 'text-center mb-2';
        
        if (file.type.startsWith('image/')) {
          // 画像プレビュー
          const img = document.createElement('img');
          img.className = 'img-fluid rounded';
          img.style.maxHeight = '200px';
          img.style.maxWidth = '100%';
          img.style.objectFit = 'cover';
          img.style.cursor = 'pointer';
          img.alt = file.name;
          
          const reader = new FileReader();
          reader.onload = function(e) {
            img.src = e.target.result;
          };
          reader.readAsDataURL(file);
          
          previewDiv.appendChild(img);
        } else if (file.type === 'application/pdf') {
          // PDFプレビュー
          previewDiv.innerHTML = `
            <div class="bg-light rounded p-3" style="height: 150px; display: flex; align-items: center; justify-content: center;">
              <i class="fas fa-file-pdf text-danger fa-3x"></i>
            </div>
          `;
        } else {
          // その他のファイル
          previewDiv.innerHTML = `
            <div class="bg-light rounded p-3" style="height: 150px; display: flex; align-items: center; justify-content: center;">
              <i class="fas fa-file text-secondary fa-3x"></i>
            </div>
          `;
        }
        
        cardBody.appendChild(previewDiv);
        
        // プレビューボタン
        const buttonDiv = document.createElement('div');
        buttonDiv.className = 'd-flex gap-2 flex-nowrap justify-content-between mt-2';
        
        if (file.type.startsWith('image/')) {
          const previewButton = document.createElement('button');
          previewButton.type = 'button';
          previewButton.className = 'btn btn-outline-primary btn-sm d-inline-flex align-items-center gap-1 px-3 py-1 flex-fill text-nowrap';
          previewButton.innerHTML = '<i class="fas fa-eye"></i><span>プレビュー</span>';
          previewButton.onclick = function() {
            const fileUrl = URL.createObjectURL(file);
            openImageModal(fileUrl, file.name);
          };

          buttonDiv.appendChild(previewButton);
        }
        
        cardBody.appendChild(buttonDiv);
        previewCard.appendChild(cardBody);
        previewCol.appendChild(previewCard);
        previewRow.appendChild(previewCol);
      });
      
      previewContainer.appendChild(previewRow);
    } else {
      // ファイルが選択されていない場合
      previewContainer.innerHTML = `
        <div class="text-center text-muted py-4">
          <i class="fas fa-cloud-upload-alt fa-2x mb-3"></i>
          <p>ここに画像やPDFのプレビューが表示されます</p>
        </div>
      `;
    }
  }
}

// ファイルサイズをフォーマットする関数
function formatFileSize(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// 初期化
initializeFilePreview();

// OCR機能の初期化
function initializeOCR() {
  const ocrButton = document.getElementById('ocr-button');
  const fileInput = document.getElementById('file-input');

  if (!ocrButton || !fileInput) {
    return;
  }

  // OCRボタンのクリックイベント
  ocrButton.addEventListener('click', handleOCRClick);
}

// OCRボタンクリック時の処理
function handleOCRClick() {
  const fileInput = document.getElementById('file-input');
  const files = fileInput.files;
  
  if (!files || files.length === 0) {
    alert('画像ファイルを選択してください');
    return;
  }

  const combinedText = [];
  const tagList = new Set();
        const titles = [];
      const startDates = [];
      const conclusionDates = [];
      const expirationDates = [];
  let currentIndex = 0;

  // レスポンス処理
  function handleResponse(data) {
    if (data.body) combinedText.push(data.body);
    if (data.tags && data.tags.length > 0) data.tags.forEach(tag => tagList.add(tag));
    if (data.title) titles.push(data.title);
            if (data.contract_start_date) startDates.push(data.contract_start_date);
        if (data.contract_conclusion_date) conclusionDates.push(data.contract_conclusion_date);
    if (data.expiration_date) expirationDates.push(data.expiration_date);

    if (currentIndex < files.length - 1) {
      currentIndex++;
      sendFile(files[currentIndex]);
    } else {
      // 契約内容を自動入力
      const bodyField = document.querySelector('#contract_body');
      if (bodyField && combinedText.length > 0) {
        bodyField.value = combinedText.join('\n\n---------- 改ページ ----------\n\n');
      }
      
      // タグを自動入力
      const tagField = document.querySelector('#contract_tag_list');
      if (tagField && tagList.size > 0) {
        tagField.value = Array.from(tagList).join(', ');
      }
      
      // タイトルを自動入力
      const titleField = document.querySelector('#contract_title');
      if (titleField && titles.length > 0) {
        titleField.value = titles[0];
      }
      
      // 契約締結日を自動入力（最後のページから取得）
      const conclusionField = document.querySelector('#contract_conclusion_date');
      if (conclusionField && conclusionDates.length > 0) {
        conclusionField.value = conclusionDates[conclusionDates.length - 1];
      }
      
      // 契約開始日を自動入力
      const startDateField = document.querySelector('#contract_start_date');
      if (startDateField && startDates.length > 0) {
        startDateField.value = startDates[0];
      }
      
      // 契約満了日を自動入力
      const expirationField = document.querySelector('#contract_expiration_date');
      if (expirationField && expirationDates.length > 0) {
        expirationField.value = expirationDates[0];
      }
    }
  }

  // ファイル送信処理
  function sendFile(file) {
    const formData = new FormData();
    formData.append('file', file);

    // CSRFトークンを安全に取得
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
    if (!csrfToken) {
      alert('セキュリティトークンが見つかりません。ページを再読み込みしてください。');
      return;
    }

    fetch('/admin/contracts/ocr_preview', {
      method: 'POST',
      headers: {
        'X-CSRF-Token': csrfToken
      },
      body: formData
    })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.error) {
          alert(`OCR失敗: ${data.error}`);
        } else {
          handleResponse(data);
        }
      })
      .catch(error => {
        alert(`OCR通信中にエラーが発生しました: ${error.message}`);
      });
  }

  // 最初のファイルを送信
  sendFile(files[currentIndex]);
}

// OCR機能の初期化
initializeOCR();

// 画像モーダルを開く関数
function openImageModal(imageUrl, filename) {
  // 既存のモーダルがあれば削除
  const existingModal = document.getElementById('customImageModal');
  if (existingModal) {
    existingModal.remove();
  }

  // モーダル要素を作成
  const modal = document.createElement('div');
  modal.id = 'customImageModal';
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
  `;

  // モーダルコンテンツを作成
  modal.innerHTML = `
    <div style="
      background: white;
      border-radius: 12px;
      padding: 0;
      width: 90%;
      height: 90%;
      position: relative;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
      display: flex;
      flex-direction: column;
    ">
      <div style="
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #eee;
        flex-shrink: 0;
      ">
        <h5 style="margin: 0; font-size: 18px; font-weight: 600;">${filename}</h5>
        <button onclick="closeImageModal()" style="
          background: none;
          border: none;
          font-size: 28px;
          cursor: pointer;
          color: #999;
          padding: 0;
          width: 30px;
          height: 30px;
          display: flex;
          align-items: center;
          justify-content: center;
        ">&times;</button>
      </div>
      <div style="
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
        overflow: auto;
      ">
        <img src="${imageUrl}" alt="${filename}" style="
          max-width: 100%;
          max-height: 100%;
          object-fit: contain;
          border-radius: 8px;
        ">
      </div>
      <div style="
        padding: 20px;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        flex-shrink: 0;
      ">
        <button onclick="closeImageModal()" class="btn btn-secondary">閉じる</button>
        <a href="${imageUrl}" download="${filename}" class="btn btn-primary">
          <i class="fas fa-download me-2"></i>ダウンロード
        </a>
      </div>
    </div>
  `;

  // モーダルを表示
  document.body.appendChild(modal);

  // ESCキーで閉じる
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      closeImageModal();
    }
  });
}

function closeImageModal() {
  const modal = document.getElementById('customImageModal');
  if (modal) {
    modal.remove();
  }
}

</script> 