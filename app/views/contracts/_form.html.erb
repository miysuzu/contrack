<div class="row g-4">
  <!-- フォーム（左・約50%） -->
  <div class="col-12 col-md-6">
    <% if @contract.errors.any? %>
      <div class="alert alert-danger">
        <h4><%= @contract.errors.count %>件のエラーが発生しました</h4>
        <ul>
          <% @contract.errors.full_messages.each do |msg| %>
            <li><%= msg %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <%= form_with model: @contract, local: true, multipart: true do |f| %>
      <div class="form-group mb-3">
        <%= f.label :title, "契約タイトル", class: "form-label fw-bold" %>
        <%= f.text_field :title, class: "form-control rounded-3 shadow-sm" %>
      </div>

      <div class="form-group mb-3">
        <%= f.label :body, "契約内容", class: "form-label fw-bold" %>
        <%= f.text_area :body, rows: 8, class: "form-control rounded-3 shadow-sm" %>
      </div>

      <div class="form-group mb-3">
        <%= f.label :status_id, "ステータス", class: "form-label fw-bold" %>
        <%= f.collection_select :status_id, Status.all, :id, :name, {}, { class: "form-control rounded-3 shadow-sm" } %>
      </div>

      <div class="form-group mb-3">
        <%= f.label :tag_list, "タグ（カンマ区切り）", class: "form-label fw-bold" %>
        <%= f.text_field :tag_list, value: @contract.tag_list.join(", "), class: "form-control rounded-3 shadow-sm" %>
      </div>

      <div class="form-group mb-3">
        <%= f.label :group_id, "グループ", class: "form-label fw-bold" %>
        <%= f.collection_select :group_id, @groups, :id, :name, { include_blank: true }, { class: "form-control rounded-3 shadow-sm" } %>
      </div>

      <div class="form-group mb-3">
        <%= f.label :conclusion_date, "締結日", class: "form-label fw-bold" %>
        <%= f.date_field :conclusion_date, class: "form-control rounded-3 shadow-sm" %>
      </div>

      <div class="form-group mb-3">
        <%= f.label :expiration_date, "満了日", class: "form-label fw-bold" %>
        <%= f.date_field :expiration_date, class: "form-control rounded-3 shadow-sm" %>
      </div>

      <div class="form-group mb-3">
        <%= f.label :renewal_date, "更新日", class: "form-label fw-bold" %>
        <%= f.date_field :renewal_date, class: "form-control rounded-3 shadow-sm" %>
      </div>

      <div class="form-group mb-3">
        <%= f.label :attachments, "添付ファイル", class: "form-label fw-bold" %>
        <%= f.file_field :attachments, multiple: true, class: "form-control rounded-3 shadow-sm", id: "file-input", accept: "image/*,.pdf,.doc,.docx,.xls,.xlsx" %>
      </div>

      <div class="d-grid gap-2 d-md-flex justify-content-md-center mt-4">
        <%= f.submit "保存", class: "btn btn-primary px-4" %>
      </div>
    <% end %>
  </div>

  <!-- プレビュー（右・約50%） -->
  <div class="col-12 col-md-6">
    <div id="pre-upload-preview"
         style="min-height: 500px; border: 2px dashed #b0c4de; border-radius: 12px; background: #f8fafc; padding: 1.5rem; overflow: auto;">
      <div class="text-center text-muted py-4">
        <i class="fas fa-cloud-upload-alt fa-2x mb-3"></i>
        <p>ここに画像やPDFのプレビューが表示されます</p>
      </div>

      <% if @contract.attachments.attached? %>
        <div>
          <strong class="text-dark">添付ファイル</strong>
          <div class="mt-3">
            <div class="row">
              <% @contract.attachments.each do |attachment| %>
                <div class="col-md-6 col-lg-4 mb-3">
                  <div class="card h-100 border-0 shadow-sm" style="min-width: 300px;">
                    <div class="card-body p-3">
                      <div class="d-flex align-items-center mb-2">
                        <i class="fas fa-paperclip me-2 text-muted"></i>
                        <small class="text-muted flex-grow-1"><%= attachment.filename %></small>
                        <small class="text-muted">(<%= number_to_human_size(attachment.byte_size) %>)</small>
                      </div>

                      <% if attachment.content_type.start_with?('image/') %>
                        <!-- 画像プレビュー -->
                        <div class="text-center mb-2">
                          <img src="<%= rails_blob_url(attachment) %>" 
                               class="img-fluid rounded" 
                               style="max-height: 200px; max-width: 100%; object-fit: cover;"
                               alt="<%= attachment.filename %>">
                        </div>
                      <% elsif attachment.content_type.start_with?('application/pdf') %>
                        <!-- PDFプレビュー -->
                        <div class="text-center mb-2">
                          <div class="bg-light rounded p-3" style="height: 150px; display: flex; align-items: center; justify-content: center;">
                            <i class="fas fa-file-pdf text-danger fa-3x"></i>
                          </div>
                        </div>
                      <% else %>
                        <!-- その他のファイル -->
                        <div class="text-center mb-2">
                          <div class="bg-light rounded p-3" style="height: 150px; display: flex; align-items: center; justify-content: center;">
                            <i class="fas fa-file text-secondary fa-3x"></i>
                          </div>
                        </div>
                      <% end %>

                      <!-- ダウンロードボタン -->
                      <div class="d-flex gap-2 flex-nowrap justify-content-between mt-2">
                        <%= link_to rails_blob_path(attachment, disposition: "attachment"), 
                            class: "btn btn-outline-primary btn-sm d-inline-flex align-items-center gap-1 px-3 py-1 flex-fill text-nowrap" do %>
                          <i class="fas fa-download"></i><span>ダウンロード</span>
                        <% end %>
                      </div>

                    </div>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
// ファイルプレビュー機能
function initializeFilePreview() {
  const fileInput = document.getElementById('file-input');
  const previewContainer = document.getElementById('pre-upload-preview');
  
  // 要素が見つからない場合は処理を終了
  if (!fileInput || !previewContainer) {
    console.log('File input or preview container not found');
    return;
  }
  
  // 既存のイベントリスナーを削除（重複を防ぐため）
  fileInput.removeEventListener('change', handleFileChange);
  
  // 新しいイベントリスナーを追加
  fileInput.addEventListener('change', handleFileChange);
  
  function handleFileChange(e) {
    const files = e.target.files;
    
    if (files.length > 0) {
      // 既存のプレビューをクリア
      previewContainer.innerHTML = '';
      
      // 新しいプレビューを作成
      const previewTitle = document.createElement('div');
      previewTitle.innerHTML = '<strong class="text-dark">選択されたファイル</strong>';
      previewContainer.appendChild(previewTitle);
      
      const previewRow = document.createElement('div');
      previewRow.className = 'row mt-3';
      
      Array.from(files).forEach((file, index) => {
        const previewCol = document.createElement('div');
        previewCol.className = 'col-md-6 col-lg-4 mb-3';
        
        const previewCard = document.createElement('div');
        previewCard.className = 'card h-100 border-0 shadow-sm';
        previewCard.style.minWidth = '300px';
        
        const cardBody = document.createElement('div');
        cardBody.className = 'card-body p-3';
        
        // ファイル情報
        const fileInfo = document.createElement('div');
        fileInfo.className = 'd-flex align-items-center mb-2';
        fileInfo.innerHTML = `
          <i class="fas fa-paperclip me-2 text-muted"></i>
          <small class="text-muted flex-grow-1">${file.name}</small>
          <small class="text-muted">(${formatFileSize(file.size)})</small>
        `;
        cardBody.appendChild(fileInfo);
        
        // プレビュー表示
        const previewDiv = document.createElement('div');
        previewDiv.className = 'text-center mb-2';
        
        if (file.type.startsWith('image/')) {
          // 画像プレビュー
          const img = document.createElement('img');
          img.className = 'img-fluid rounded';
          img.style.maxHeight = '200px';
          img.style.maxWidth = '100%';
          img.style.objectFit = 'cover';
          img.alt = file.name;
          
          const reader = new FileReader();
          reader.onload = function(e) {
            img.src = e.target.result;
          };
          reader.readAsDataURL(file);
          
          previewDiv.appendChild(img);
        } else if (file.type === 'application/pdf') {
          // PDFプレビュー
          previewDiv.innerHTML = `
            <div class="bg-light rounded p-3" style="height: 150px; display: flex; align-items: center; justify-content: center;">
              <i class="fas fa-file-pdf text-danger fa-3x"></i>
            </div>
          `;
        } else {
          // その他のファイル
          previewDiv.innerHTML = `
            <div class="bg-light rounded p-3" style="height: 150px; display: flex; align-items: center; justify-content: center;">
              <i class="fas fa-file text-secondary fa-3x"></i>
            </div>
          `;
        }
        
        cardBody.appendChild(previewDiv);
        previewCard.appendChild(cardBody);
        previewCol.appendChild(previewCard);
        previewRow.appendChild(previewCol);
      });
      
      previewContainer.appendChild(previewRow);
    } else {
      // ファイルが選択されていない場合
      previewContainer.innerHTML = `
        <div class="text-center text-muted py-4">
          <i class="fas fa-cloud-upload-alt fa-2x mb-3"></i>
          <p>ここに画像やPDFのプレビューが表示されます</p>
        </div>
      `;
    }
  }
}

// ファイルサイズをフォーマットする関数
function formatFileSize(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// 初期化を複数のタイミングで実行
document.addEventListener('DOMContentLoaded', initializeFilePreview);
document.addEventListener('turbo:load', initializeFilePreview);
document.addEventListener('turbo:render', initializeFilePreview);

// 即座にも実行（DOMが既に読み込まれている場合）
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeFilePreview);
} else {
  initializeFilePreview();
}
</script>